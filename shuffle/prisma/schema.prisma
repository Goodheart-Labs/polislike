generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model comments {
  id                Int                  @id @unique @default(autoincrement())
  poll_id           Int
  user_id           String?
  edited_from_id    Int?
  session_id        String?              @db.VarChar
  reporting_type    reporting_type_enum? @default(default)
  author_name       String?
  author_avatar_url String?
  comment           String
  created_at        DateTime             @default(now()) @db.Timestamptz(6)
  comments          comments?            @relation("commentsTocomments", fields: [edited_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_comments    comments[]           @relation("commentsTocomments")
  poll              polls                @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  flagged_comments  flagged_comments[]
  responses         responses[]
}

model flagged_comments {
  id         Int      @id @unique @default(autoincrement())
  comment_id Int
  user_id    String?
  session_id String   @db.VarChar
  reason     String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  comment    comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model polls {
  id                Int        @id @unique @default(autoincrement())
  user_id           String?
  slug              String     @unique @db.VarChar
  title             String     @db.VarChar
  core_question     String
  created_at        DateTime   @default(now()) @db.Timestamptz(6)
  comments          comments[]
  analytics_filters Json       @default("{}")
}

model responses {
  id         Int      @id @unique @default(autoincrement())
  user_id    String?
  comment_id Int
  session_id String   @db.VarChar
  valence    String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  comment    comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum reporting_type_enum {
  default
  demographic
}
