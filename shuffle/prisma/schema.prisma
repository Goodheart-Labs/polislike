generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Author {
  id         Int         @id @unique @default(autoincrement())
  userId     String      @unique
  name       String?
  avatarUrl  String?
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  statements Statement[]
  comments   Comment[]
}

model Statement {
  id                Int                @id @unique @default(autoincrement())
  poll_id           Int
  user_id           String?
  session_id        String?            @db.VarChar
  text              String
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  poll              polls              @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  flaggedStatements FlaggedStatement[]
  responses         responses[]
  author            Author?            @relation(fields: [user_id], references: [userId], onDelete: NoAction, onUpdate: NoAction)
}

model FlaggedStatement {
  id          Int       @id @unique @default(autoincrement())
  statementId Int
  user_id     String?
  session_id  String    @db.VarChar
  reason      String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  statement   Statement @relation(fields: [statementId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
}

model polls {
  id                Int                   @id @unique @default(autoincrement())
  user_id           String
  slug              String?               @unique @db.VarChar
  title             String                @db.VarChar
  core_question     String
  created_at        DateTime              @default(now()) @db.Timestamptz(6)
  visibility        polls_visibility_enum @default(public)
  analytics_filters Json                  @default("{}")
  statements        Statement[]
  comments          Comment[]
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  userId    String?
  sessionId String   @db.VarChar
  text      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  pollId    Int
  poll      polls    @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author    Author?  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
}

enum choice_enum {
  agree
  disagree
  skip
  itsComplicated
}

model responses {
  id          Int         @id @unique @default(autoincrement())
  user_id     String?
  statementId Int
  session_id  String      @db.VarChar
  choice      choice_enum
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  statement   Statement   @relation(fields: [statementId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum polls_visibility_enum {
  public
  hidden
  private
}
